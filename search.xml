<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Hexo+NexT搭建个人博客完整教程</title>
    <url>/article/%E4%BD%BF%E7%94%A8Hexo-NexT%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 是一个基于 Node.js 的快速、简洁且高效的博客框架。它支持 Markdown 语法，并拥有丰富的主题和插件生态系统，非常适合开发者快速搭建个人技术博客。</p>
<p>本文将手把手带你完成 Hexo 博客的搭建，并配置深受喜爱的 NexT 主题，同时集成搜索、分类、标签等核心功能，最终生成一篇可以直接部署的博客文章。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在开始之前，请确保你的电脑上已安装以下工具：</p>
<ol>
<li><strong>Node.js</strong>: Hexo 的运行环境，请从 <a href="https://nodejs.org/">Node.js 官网</a> 下载并安装 LTS 版本。</li>
<li><strong>Git</strong>: 用于版本控制以及后续部署到 GitHub Pages，请从 <a href="https://git-scm.com/">Git 官网</a> 下载安装。</li>
<li><strong>代码编辑器</strong>: 推荐使用 <a href="https://code.visualstudio.com/">Visual Studio Code</a>，它对 Markdown 和配置文件的编辑支持极佳。</li>
</ol>
<h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p>打开终端（Windows下为CMD或PowerShell，macOS&#x2F;Linux下为Terminal），运行以下命令检查环境是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v  <span class="comment"># 显示 Node.js 版本</span></span><br><span class="line">npm -v   <span class="comment"># 显示 npm 包管理器版本</span></span><br><span class="line">git --version <span class="comment"># 显示 Git 版本</span></span><br></pre></td></tr></table></figure>

<h2 id="搭建-Hexo-博客"><a href="#搭建-Hexo-博客" class="headerlink" title="搭建 Hexo 博客"></a>搭建 Hexo 博客</h2><p>环境就绪后，我们开始创建博客项目。</p>
<h3 id="1-安装-Hexo-cli"><a href="#1-安装-Hexo-cli" class="headerlink" title="1. 安装 Hexo-cli"></a>1. 安装 Hexo-cli</h3><p>在终端中执行以下命令，全局安装 Hexo 的命令行工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="2-初始化博客项目"><a href="#2-初始化博客项目" class="headerlink" title="2. 初始化博客项目"></a>2. 初始化博客项目</h3><p>创建一个文件夹作为你的博客根目录，然后在终端中进入该目录并执行初始化命令。这里我们以 <code>my_blog</code> 为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init my_blog</span><br><span class="line"><span class="built_in">cd</span> my_blog</span><br></pre></td></tr></table></figure>

<p>初始化完成后，安装项目依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>此时，你的博客项目基本结构已经创建完毕。你可以执行 <code>hexo s</code> 启动本地服务器，在浏览器中访问 <code>http://localhost:4000</code> 查看默认效果。</p>
<h2 id="部署-NexT-主题"><a href="#部署-NexT-主题" class="headerlink" title="部署 NexT 主题"></a>部署 NexT 主题</h2><p>默认的主题较为简陋，我们 NexT 主题来美化我们的博客。</p>
<h3 id="1-下载-NexT-主题"><a href="#1-下载-NexT-主题" class="headerlink" title="1. 下载 NexT 主题"></a>1. 下载 NexT 主题</h3><p>在博客根目录下，使用 Git 克隆 NexT 主题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h3 id="2-启用-NexT-主题"><a href="#2-启用-NexT-主题" class="headerlink" title="2. 启用 NexT 主题"></a>2. 启用 NexT 主题</h3><p>打开博客根目录下的<strong>站点配置文件</strong> <code>_config.yml</code>，找到 <code>theme</code> 字段并将其值修改为 <code>next</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/docs/plugins.html</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/docs/themes.html</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<p>保存文件后，再次启动本地服务器（<code>hexo clean &amp;&amp; hexo s</code>），刷新浏览器，你应该就能看到 NexT 主题的默认样式了。</p>
<h2 id="主题优化与功能配置"><a href="#主题优化与功能配置" class="headerlink" title="主题优化与功能配置"></a>主题优化与功能配置</h2><p>接下来，我们对 NexT 主题进行一系列优化和功能开启。</p>
<h3 id="1-启用-Canvas-Nest-动画效果"><a href="#1-启用-Canvas-Nest-动画效果" class="headerlink" title="1. 启用 Canvas Nest 动画效果"></a>1. 启用 Canvas Nest 动画效果</h3><p>打开<strong>主题配置文件</strong> <code>themes/next/_config.yml</code>，搜索 <code>canvas_nest</code> 并将 <code>enable</code> 选项设为 <code>true</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># themes/next/_config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># 是否在移动设备上启用</span></span><br></pre></td></tr></table></figure>

<h3 id="2-配置本地搜索"><a href="#2-配置本地搜索" class="headerlink" title="2. 配置本地搜索"></a>2. 配置本地搜索</h3><p>本地搜索能让用户快速在站内找到相关文章。</p>
<p><strong>首先，安装搜索数据生成插件：</strong><br>在博客根目录运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p><strong>然后，配置站点和主题：</strong></p>
<ol>
<li>在<strong>站点配置文件</strong> <code>_config.yml</code> 中添加以下内容：<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span>  <span class="comment"># 搜索范围，post代表文章</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span> <span class="comment"># 文件格式</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span> <span class="comment"># 显示搜索结果的最大条数</span></span><br></pre></td></tr></table></figure></li>
<li>在<strong>主题配置文件</strong> <code>themes/next/_config.yml</code> 中启用 <code>local_search</code>：<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># themes/next/_config.yml</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-创建“分类”与“标签”页面"><a href="#3-创建“分类”与“标签”页面" class="headerlink" title="3. 创建“分类”与“标签”页面"></a>3. 创建“分类”与“标签”页面</h3><p>NexT 的菜单需要指向一个实际的页面。我们需要为“分类”和“标签”分别创建页面。</p>
<p><strong>创建分类页面：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
<p>打开生成的 <code>source/categories/index.md</code> 文件，添加 <code>type</code> 属性：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2024-05-21 10:00:00</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p><strong>创建标签页面：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p>打开生成的 <code>source/tags/index.md</code> 文件，同样添加 <code>type</code> 属性：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2024-05-21 10:01:00</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h3 id="4-更新菜单配置"><a href="#4-更新菜单配置" class="headerlink" title="4. 更新菜单配置"></a>4. 更新菜单配置</h3><p>让“分类”和“标签”等链接显示在菜单上，需要修改<strong>主题配置文件</strong> <code>themes/next/_config.yml</code>，找到 <code>menu</code> 部分，确保以下菜单项和链接是正确的：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># themes/next/_config.yml</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">/search/</span> <span class="string">||</span> <span class="string">search</span> <span class="comment"># 确保 search 已开启</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：前面的 <code>/</code> 或 <code>/categories/</code> 是路径，后面的 <code>|| home</code> 是图标，都可以按需修改。</p>
<h3 id="5-创建“关于”页面"><a href="#5-创建“关于”页面" class="headerlink" title="5. 创建“关于”页面"></a>5. 创建“关于”页面</h3><p>一个完整的博客通常会有一个关于页面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>
<p>编辑生成的 <code>source/about/index.md</code> 文件，填入你的个人信息和介绍即可。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于我</span><br><span class="line"><span class="section">date: 2024-05-21 10:02:00</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span>你好，世界！<span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>这里是我的个人博客，记录我学习和生活中的点点滴滴。<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="6-添加个性化和交互效果"><a href="#6-添加个性化和交互效果" class="headerlink" title="6. 添加个性化和交互效果"></a>6. 添加个性化和交互效果</h3><p>为了让博客更具个性和趣味性，我们可以添加一些简单的交互效果，比如动态背景和点击特效。</p>
<h4 id="1）添加-Canvas-Nest-动态背景"><a href="#1）添加-Canvas-Nest-动态背景" class="headerlink" title="1）添加 Canvas Nest 动态背景"></a>1）添加 Canvas Nest 动态背景</h4><p>NexT 主题自带了 Canvas Nest 动画（我们已在 <strong>1. 启用 Canvas Nest 动画效果</strong> 中开启），这里我们介绍另一种更灵活的实现方式，便于叠加其他脚本。</p>
<p>首先，创建一个自定义文件用于存放脚本代码。在博客根目录下创建 <code>source/_data</code> 文件夹（如果不存在），并在其中新建文件 <code>footer.njk</code>。</p>
<p>打开 <code>source/_data/footer.njk</code> 文件，添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可以使用CDN资源，但建议下载到本地 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script color=&quot;0,0,255&quot; opacity=&quot;0.5&quot; zIndex=&quot;-1&quot; count=&quot;99&quot; src=&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 推荐：下载到本地，以实现离线访问和更快的加载速度 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 从 https://github.com/theme-next/theme-next-canvas-nest 下载 canvas-nest.js --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2. 将其放入 themes/next/source/js/ 目录下，并重命名为 canvas_nest.js --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3. 在 footer.njk 中引用本地脚本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">color</span>=<span class="string">&quot;0,0,255&quot;</span> <span class="attr">opacity</span>=<span class="string">&quot;0.5&quot;</span> <span class="attr">zIndex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">count</span>=<span class="string">&quot;99&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/canvas_nest.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：将 <code>canvas-nest.js</code> 下载到本地（放在 <code>themes/next/source/js/</code> 目录）并重命名，然后在 <code>footer.njk</code> 中通过 <code>/js/...</code> 引用，比直接使用CDN更稳定，且符合静态博客的原则。</p>
</blockquote>
<p>然后，修改<strong>主题配置文件</strong> <code>themes/next/_config.yml</code>，启用这个自定义文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># themes/next/_config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom File Path</span></span><br><span class="line"><span class="comment"># Define the custom file path.</span></span><br><span class="line"><span class="comment"># Create your custom files in site `source` directory and setting here.</span></span><br><span class="line"><span class="comment"># Custom file path support saas in path which will be automatically replaced by `url` in `_config.yml`.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk  # 确保这一行被取消注释或添加</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br></pre></td></tr></table></figure>
<h4 id="2）添加点击爱心效果"><a href="#2）添加点击爱心效果" class="headerlink" title="2）添加点击爱心效果"></a>2）添加点击爱心效果</h4><p>接下来，我们同样使用刚才创建的 <code>footer.njk</code> 文件来添加点击时飞出爱心的效果。</p>
<p>首先，在 <code>themes/next/source/js/</code> 目录下新建一个文件，命名为 <code>click_love.js</code>。</p>
<p>打开 <code>click_love.js</code> 文件，将下面的代码粘贴进去：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!(<span class="keyword">function</span> (<span class="params">e, t, a</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">n</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">c</span>(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);-ms-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>), <span class="title function_">o</span>(), <span class="title function_">r</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">r</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; d.<span class="property">length</span>; e++) d[e].<span class="property">alpha</span> &lt;= <span class="number">0</span> ? (t.<span class="property">body</span>.<span class="title function_">removeChild</span>(d[e].<span class="property">el</span>), d.<span class="title function_">splice</span>(e, <span class="number">1</span>)) : (d[e].<span class="property">y</span>--, (d[e].<span class="property">scale</span> += <span class="number">0.004</span>), (d[e].<span class="property">alpha</span> -= <span class="number">0.013</span>), (d[e].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&quot;left:&quot;</span> + d[e].<span class="property">x</span> + <span class="string">&quot;px;top:&quot;</span> + d[e].<span class="property">y</span> + <span class="string">&quot;px;opacity:&quot;</span> + d[e].<span class="property">alpha</span> + <span class="string">&quot;;transform:scale(&quot;</span> + d[e].<span class="property">scale</span> + <span class="string">&quot;,&quot;</span> + d[e].<span class="property">scale</span> + <span class="string">&quot;) rotate(45deg);background:&quot;</span> + d[e].<span class="property">color</span> + <span class="string">&quot;;z-index:99999&quot;</span>));</span><br><span class="line">        <span class="title function_">requestAnimationFrame</span>(r)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> e.<span class="property">onclick</span> &amp;&amp; e.<span class="property">onclick</span>;</span><br><span class="line">        e.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            t &amp;&amp; <span class="title function_">t</span>(), <span class="title function_">i</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = t.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        (a.<span class="property">className</span> = <span class="string">&quot;heart&quot;</span>),</span><br><span class="line">            d.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">el</span>: a,</span><br><span class="line">                <span class="attr">x</span>: e.<span class="property">clientX</span> - <span class="number">5</span>,</span><br><span class="line">                <span class="attr">y</span>: e.<span class="property">clientY</span> - <span class="number">5</span>,</span><br><span class="line">                <span class="attr">scale</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">alpha</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="title function_">s</span>()</span><br><span class="line">            &#125;),</span><br><span class="line">            t.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = t.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">        a.<span class="property">type</span> = <span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            a.<span class="title function_">appendChild</span>(t.<span class="title function_">createTextNode</span>(e))</span><br><span class="line">        &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">            a.<span class="property">styleSheet</span>.<span class="property">cssText</span> = e</span><br><span class="line">        &#125;</span><br><span class="line">        t.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">s</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;rgb(&quot;</span> + ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;)&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> d = [];</span><br><span class="line">    (e.<span class="property">requestAnimationFrame</span> = e.<span class="property">requestAnimationFrame</span> || e.<span class="property">webkitRequestAnimationFrame</span> || e.<span class="property">mozRequestAnimationFrame</span> || e.<span class="property">oRequestAnimationFrame</span> || e.<span class="property">msRequestAnimationFrame</span> || <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(e, <span class="number">1e3</span> / <span class="number">60</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">        <span class="title function_">n</span>()</span><br><span class="line">&#125;)(<span class="variable language_">window</span>, <span class="variable language_">document</span>);</span><br></pre></td></tr></table></figure>

<p>最后，回到 <code>source/_data/footer.njk</code> 文件，在 Canvas Nest 脚本的下方添加对 <code>click_love.js</code> 的引用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- source/_data/footer.njk --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">color</span>=<span class="string">&quot;0,0,255&quot;</span> <span class="attr">opacity</span>=<span class="string">&quot;0.5&quot;</span> <span class="attr">zIndex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">count</span>=<span class="string">&quot;99&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/canvas_nest.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/click_love.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>保存文件后，重新生成并启动博客（<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>），现在你的博客就有了动态背景和点击爱心的效果！</p>
<h2 id="如何创建一篇文章"><a href="#如何创建一篇文章" class="headerlink" title="如何创建一篇文章"></a>如何创建一篇文章</h2><p>现在，你的博客框架已经搭建完成。让我们来创建第一篇真正的文章。</p>
<h3 id="创建文章文件"><a href="#创建文章文件" class="headerlink" title="创建文章文件"></a>创建文章文件</h3><p>在博客根目录运行命令，<code>article-title</code> 替换成你的文章标题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;我的第一篇博客文章&quot;</span></span><br></pre></td></tr></table></figure>
<p>这会在 <code>source/_posts</code> 目录下创建 <code>我的第一篇博客文章.md</code> 文件。</p>
<h3 id="编辑文章内容"><a href="#编辑文章内容" class="headerlink" title="编辑文章内容"></a>编辑文章内容</h3><p>用 VS Code 打开这个 Markdown 文件，你会发现基本的 Front Matter 已经创建好了：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我的第一篇博客文章</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-05-21 11:00:00</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h4 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h4><p>为了在首页只显示文章摘要而非全文，有两种推荐方法：</p>
<ol>
<li><p><strong>使用 <code>&lt;!-- more --&gt;</code> 标签（推荐）</strong>：在 Markdown 内容的任意位置插入此标签，首页只会显示标签之前的内容。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## 欢迎来到我的博客！</span></span><br><span class="line"></span><br><span class="line">这是文章的开头部分...</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">## 这是文章的后续部分</span></span><br><span class="line"></span><br><span class="line">这部分内容只有在点击&quot;阅读全文&quot;后才能看到...</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>手动添加 <code>description</code></strong>：在 Front Matter 中手动编写摘要。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我的第一篇博客文章</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-05-21 11:00:00</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">这篇文章主要介绍了如何在Hexo博客中撰写和格式化一篇新的文章。</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">教程</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">入门指南</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="添加文章封面（可选）"><a href="#添加文章封面（可选）" class="headerlink" title="添加文章封面（可选）"></a>添加文章封面（可选）</h4><p>在文章的 Front Matter 中添加 <code>cover</code> 字段来设置文章的封面图片。图片应存放在 <code>source/images/</code> 目录下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我的第一篇博客文章</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-05-21 11:00:00</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">/images/default-cover.jpg</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">入门指南</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h2 id="本地预览与部署"><a href="#本地预览与部署" class="headerlink" title="本地预览与部署"></a>本地预览与部署</h2><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>每次修改了配置或文章后，都需要重新生成站点。执行以下命令来清除缓存、重新生成并启动本地服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean   <span class="comment"># 清除缓存文件 (db.json) 和生成的公共文件 (public)</span></span><br><span class="line">hexo generate <span class="comment"># 生成静态文件到 public 目录，可简写为 hexo g</span></span><br><span class="line">hexo server   <span class="comment"># 启动本地服务器，可简写为 hexo s</span></span><br></pre></td></tr></table></figure>
<p>然后在浏览器中访问 <code>http://localhost:4000</code> 即可查看更新后的效果。</p>
<h3 id="部署到-GitHub-Pages（可选）"><a href="#部署到-GitHub-Pages（可选）" class="headerlink" title="部署到 GitHub Pages（可选）"></a>部署到 GitHub Pages（可选）</h3><p>如果你想将博客托管在 GitHub Pages 上，方便他人访问，可以按以下步骤操作：</p>
<ol>
<li><strong>创建 GitHub 仓库</strong>：在你的 GitHub 账号下创建一个新仓库，命名为 <code>你的用户名.github.io</code>。</li>
<li><strong>安装部署插件</strong>：在博客根目录安装部署工具：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li><strong>配置站点</strong>：打开<strong>站点配置文件</strong> <code>_config.yml</code>，在文件末尾添加 <code>deploy</code> 配置：<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/你的用户名/你的用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span> <span class="comment"># 注意：如果你的仓库默认分支是 master，请改成 master</span></span><br></pre></td></tr></table></figure>
请将 <code>你的用户名</code> 替换为你的 GitHub 用户名。</li>
<li><strong>执行部署</strong>：在终端执行一键部署命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li>
</ol>
<p>稍等片刻，你的博客就会自动发布到 <code>https://你的用户名.github.io</code>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，你已经成功搭建了一个功能完善、样式精美且充满个性的个人博客。从创建文章到配置功能、添加交互效果，再到最终的线上部署，整个流程已经清晰呈现。</p>
<p>博客的生命力在于持续更新。开始在这里记录你的技术思考、学习笔记和生活感悟吧！期待看到一个充满活力的技术社区。</p>
<blockquote>
<p><strong>搭建过程中参考了以下资源：</strong></p>
<ul>
<li><a href="https://hexo.io/docs/">Hexo 官方文档</a></li>
<li><a href="https://theme-next.js.org/">NexT 主题使用文档</a></li>
<li><a href="https://github.com/theme-next/theme-next-canvas-nest">Canvas Nest 动画项目</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下使用NVM管理多版本Node.js超详细教程</title>
    <url>/article/%E4%BD%BF%E7%94%A8NVM%E7%AE%A1%E7%90%86nodejs%E6%95%99%E7%A8%8B%E2%80%94%E2%80%94%E4%BB%A5windows%E4%B8%BA%E4%BE%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p><strong>前言</strong></p>
<p>在前端开发中，我们可能会遇到需要在不同项目中使用不同版本的 Node.js 和 npm 的情况。例如，一个旧项目需要 Node.js 14.x，而一个新项目则要求必须使用 Node.js 18.x 以上。手动管理多个版本的 Node.js 不仅繁琐，还容易造成环境混乱。</p>
<p><strong>NVM (Node Version Manager)</strong> 就是来解决这个问题的强大工具。通过 NVM，我们可以轻松地在电脑上安装、切换和删除任意多个 Node.js 版本。</p>
<p>本教程将详细讲解如何在 Windows 系统上使用 <strong>nvm-windows</strong> 来管理你的 Node.js 环境。</p>
</blockquote>
<h2 id="1-什么是-nvm-windows？"><a href="#1-什么是-nvm-windows？" class="headerlink" title="1. 什么是 nvm-windows？"></a>1. 什么是 nvm-windows？</h2><p><code>nvm-windows</code> 是一个专门为 Windows 系统设计的 Node.js 版本管理器。它深受 macOS 和 Linux 平台上流行的 <code>nvm</code> (Node Version Manager) 的启发，提供了一套相似的命令，让 Windows 用户也能享受到多版本 Node.js 带来的便利。</p>
<h2 id="2-前置准备：卸载已安装的-Node-js"><a href="#2-前置准备：卸载已安装的-Node-js" class="headerlink" title="2. 前置准备：卸载已安装的 Node.js"></a>2. 前置准备：卸载已安装的 Node.js</h2><p>在安装 nvm-windows 之前，<strong>强烈建议你先卸载掉电脑上通过官网安装包或其它方式安装的 Node.js</strong>。这可以避免日后可能出现的版本冲突和环境变量混乱问题。</p>
<h3 id="卸载步骤："><a href="#卸载步骤：" class="headerlink" title="卸载步骤："></a>卸载步骤：</h3><ol>
<li>打开 <strong>控制面板</strong> -&gt; <strong>程序和功能</strong> (或 <strong>设置</strong> -&gt; <strong>应用</strong> -&gt; <strong>应用和功能</strong>)。</li>
<li>在程序列表中找到 <code>Node.js</code>。</li>
<li>选中它，然后点击 <strong>卸载</strong>。</li>
<li>检查系统环境变量 <code>PATH</code> 中是否包含 Node.js 的安装路径 (例如 <code>C:\Program Files\nodejs\</code>)，如果存在，请将其删除。</li>
</ol>
<p><strong>完成以上步骤后，重启你的终端</strong> (如 CMD, PowerShell, Git Bash) 以确保所有更改生效。</p>
<h2 id="3-安装-nvm-windows"><a href="#3-安装-nvm-windows" class="headerlink" title="3. 安装 nvm-windows"></a>3. 安装 nvm-windows</h2><p>nvm-windows 的安装过程非常简单，官方提供了一个安装程序，它会自动帮你完成所有配置。</p>
<h3 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h3><ol>
<li><p><strong>下载安装程序</strong><br>访问 nvm-windows 的官方 GitHub 发布页面：<br><a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p>
<p>在该页面，找到最新稳定版本的 “nvm-setup.exe” 文件并下载。</p>
</li>
<li><p><strong>运行安装程序</strong><br>找到你下载的 <code>nvm-setup.exe</code> 文件，双击运行。</p>
</li>
<li><p><strong>确认安装路径</strong><br>安装程序会显示一个窗口，让你选择 nvm 的安装路径。<strong>建议使用默认路径 <code>C:\nvm</code></strong>，这符合大多数人的使用习惯，也能避免后续可能出现的权限问题。<br>点击 <strong>“Next”</strong>。</p>
</li>
<li><p><strong>确认 Node.js 存储路径</strong><br>接下来，安装程序会让你选择 Node.js 的版本存放路径（即不同版本的 Node.js 文件将下载并解压到这个目录）。同样，<strong>建议使用默认路径 <code>C:\nodejs</code></strong>。<br>点击 <strong>“Next”</strong>。</p>
</li>
<li><p><strong>完成安装</strong><br>安装程序会自动配置系统环境变量（<code>NVM_HOME</code> 和 <code>NVM_SYMLINK</code>），并创建一个指向最新活动版本的符号链接 <code>C:\nodejs</code>。这是实现版本切换的关键。<br>点击 <strong>“Install”</strong> 开始安装。安装完成后，会提示你 <strong>“Installation complete. A restart may be required to finalize changes.”</strong> (安装完成。可能需要重启电脑以使更改生效)。<strong>现在可以先不重启</strong>，我们先在终端里测试一下。</p>
</li>
</ol>
<h2 id="4-基本使用命令"><a href="#4-基本使用命令" class="headerlink" title="4. 基本使用命令"></a>4. 基本使用命令</h2><p>安装完成后，打开一个新的<strong>管理员权限</strong>的命令提示符 或 PowerShell 终端。以管理员身份运行可以避免一些后续安装 Node.js 版本时的权限问题。</p>
<p>以下是 nvm-windows 最常用的几个命令：</p>
<h3 id="4-1-查看所有可用的-Node-js-版本"><a href="#4-1-查看所有可用的-Node-js-版本" class="headerlink" title="4.1 查看所有可用的 Node.js 版本"></a>4.1 查看所有可用的 Node.js 版本</h3><p><code>nvm list available</code> (或 <code>nvm ls remote</code>) 会列出所有可以安装的远程 Node.js 版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">nvm list available</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例输出 (部分)</span></span><br><span class="line">...</span><br><span class="line"> v18.18.0</span><br><span class="line"> v18.17.1</span><br><span class="line"> ...</span><br><span class="line"> v16.20.2</span><br><span class="line"> ...</span><br><span class="line"> v14.21.3</span><br><span class="line"> ...</span><br><span class="line">LTS: Long Term Support (长期支持) 版本，推荐在生产环境中使用。</span><br></pre></td></tr></table></figure>

<h3 id="4-2-安装指定版本的-Node-js"><a href="#4-2-安装指定版本的-Node-js" class="headerlink" title="4.2 安装指定版本的 Node.js"></a>4.2 安装指定版本的 Node.js</h3><p>使用 <code>nvm install &lt;version&gt;</code> 命令来安装你需要的版本，例如安装最新的长期支持版。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装最新的 LTS (长期支持) 版本</span></span><br><span class="line">nvm install --lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本，例如安装 18.18.0</span></span><br><span class="line">nvm install 18.18.0</span><br></pre></td></tr></table></figure>

<p>在安装过程中，nvm 会自动下载对应的 Node.js 安装包，并将其解压到 <code>C:\nodejs</code> 目录下。</p>
<h3 id="4-3-切换-Node-js-版本"><a href="#4-3-切换-Node-js-版本" class="headerlink" title="4.3 切换 Node.js 版本"></a>4.3 切换 Node.js 版本</h3><p>安装完成后，使用 <code>nvm use &lt;version&gt;</code> 来切换你要使用的 Node.js 版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到刚刚安装的 18.18.0 版本</span></span><br><span class="line">nvm use 18.18.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看当前使用的版本</span></span><br><span class="line">nvm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例输出</span></span><br><span class="line">...</span><br><span class="line">  * 18.18.0 (Currently using 64-bit executable)</span><br><span class="line">    16.20.2</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 带星号 * 的即为当前正在使用的版本</span></span><br></pre></td></tr></table></figure>

<p>此时，打开一个新的终端（不一定要管理员权限），输入 <code>node -v</code> 和 <code>npm -v</code>，你会发现版本已经改变了。</p>
<h3 id="4-4-查看已安装的版本"><a href="#4-4-查看已安装的版本" class="headerlink" title="4.4 查看已安装的版本"></a>4.4 查看已安装的版本</h3><p><code>nvm list</code> 会显示所有通过 nvm 安装的 Node.js 版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出示例</span></span><br><span class="line">  * 18.18.0 (Currently using 64-bit executable)</span><br><span class="line">    16.20.2</span><br></pre></td></tr></table></figure>

<h3 id="4-5-卸载指定版本"><a href="#4-5-卸载指定版本" class="headerlink" title="4.5 卸载指定版本"></a>4.5 卸载指定版本</h3><p>如果某个版本不再需要，可以使用 <code>nvm uninstall &lt;version&gt;</code> 将其卸载。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载 16.20.2 版本</span></span><br><span class="line">nvm uninstall 16.20.2</span><br></pre></td></tr></table></figure>

<h2 id="5-常用命令速查表"><a href="#5-常用命令速查表" class="headerlink" title="5. 常用命令速查表"></a>5. 常用命令速查表</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>nvm list available</code></td>
<td align="left">列出所有可以安装的 Node.js 版本</td>
</tr>
<tr>
<td align="left"><code>nvm install &lt;version&gt;</code></td>
<td align="left">安装指定的 Node.js 版本</td>
</tr>
<tr>
<td align="left"><code>nvm install --lts</code></td>
<td align="left">安装最新的 LTS 版本</td>
</tr>
<tr>
<td align="left"><code>nvm use &lt;version&gt;</code></td>
<td align="left">切换到指定的 Node.js 版本</td>
</tr>
<tr>
<td align="left"><code>nvm list</code></td>
<td align="left">列出所有已安装的 Node.js 版本</td>
</tr>
<tr>
<td align="left"><code>nvm uninstall &lt;version&gt;</code></td>
<td align="left">卸载指定的 Node.js 版本</td>
</tr>
<tr>
<td align="left"><code>nvm current</code></td>
<td align="left">显示当前正在使用的 Node.js 版本</td>
</tr>
</tbody></table>
<h2 id="6-结语"><a href="#6-结语" class="headerlink" title="6. 结语"></a>6. 结语</h2><p>通过以上步骤，你已经在 Windows 系统上成功搭建了基于 nvm-windows 的 Node.js 多版本环境。这个工具将极大地提高你开发不同项目时的灵活性，告别版本冲突的烦恼。</p>
<p>现在，你可以放心地去尝试不同版本，或者在不同项目之间自由切换了。祝你编码愉快！</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Node.js</tag>
        <tag>NVM</tag>
        <tag>Windows</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Hexo 8.0 + NexT 主题中使用 APlayer 音乐播放器</title>
    <url>/article/Hexo-8-0-NexT%E4%B8%BB%E9%A2%98%E4%B8%AD%E4%BD%BF%E7%94%A8APlayer%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本教程完整说明了如何在 Hexo 8.0 与 NexT 主题中集成 APlayer 音乐播放器，详细内容请参阅作者已发布的文章：</p>
<p><a href="https://wfxt.github.io/2022/06/16/2022/06/hexo_aplayer/">在 Hexo 中使用 APlayer</a></p>
<p>原文包含插件安装、MetingJS 配置、布局文件修改、歌单 ID 获取等所有关键步骤，建议直接参考该博客进行操作。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>前端开发</tag>
        <tag>APlayer</tag>
        <tag>音乐播放器</tag>
      </tags>
  </entry>
</search>
